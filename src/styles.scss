@import url('https://fonts.googleapis.com/css?family=Poppins:200,300,400|Roboto:300,400');

$i:!important;

$baseFont:16px;

$primary-color:#377dff;
$primary-color-dark:#356bc5;
$black:#000;
$greyMed:#77838f;
$white:#fff;
$greenPale:rgba(0, 201, 167, 0.1);
$greenMed:#00c9a7;
$bluePale:rgba(55, 125, 255, 0.1);
$blueMed:#377dff;



// mixins $ functions

@mixin clearfix {
    &:before,
   &:after {
       content: "";
       display: table;
   }
   &:after {
       clear: both;
   }
   zoom: 1;
}
@mixin transition($what: all, $time: 0.2s, $how: ease-in-out) {
    -webkit-transition: $what $time $how;
    -moz-transition:    $what $time $how;
    -ms-transition:     $what $time $how;
    -o-transition:      $what $time $how;
    transition:         $what $time $how;
}
// padding fn
@function padding($top:0,$right:0,$bottom:0,$left:0){
    @return $top $right $bottom $left ;
}
// margin fn
@function margin($top:0,$right:0,$bottom:0,$left:0){
    @return $top $right $bottom $left;
}
// To quickly centre a block element without having to worry about if there is any top or bottom margin already applied.
@mixin push--auto {
    margin: { 
        left: auto;
        right: auto;
    }
}
// When using ::before and ::after
@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}
// for creating scalable elements (usually images / background 
@mixin responsive-ratio($x,$y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

// triangles
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

// font styles
@mixin font-poppins($size: false, $colour: false, $weight: false,  $lh: false) {
    font-family: 'Poppins', sans-serif;
    @if $size { font-size: $size; }
    @if $colour { color: $colour; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
}
@mixin font-roboto($size: false, $colour: false, $weight: false,  $lh: false) {
    font-family: 'Roboto', sans-serif;
    @if $size { font-size: $size; }
    @if $colour { color: $colour; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
}

// media queries
$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":      560px,
    "tablet-small": 640px,
    "tablet":       768px,
    "tablet-wide":  1024px,
    "desktop":      1248px,
    "desktop-wide": 1440px
);
@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

// z index
@function z($name) {
    @if index($z-indexes, $name) {
        @return (length($z-indexes) - index($z-indexes, $name)) + 1;
    } @else {
        @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
        @return null;
    }
}
$z-indexes: (
    "outdated-browser",
    "modal",
    "site-header",
    "page-wrapper",
    "site-footer"
);



// style starts here
.btn-cont{
    padding:padding(1rem,0,1rem,0);
}
.btn-primary {
    color: $white;
    background-color: $primary-color;
    border:none;
}
.btn-transparent{
    background-color: transparent;
    border: none;
    box-shadow: none;
    margin:margin(0,3rem,0,0);
    i{
        color:$greenPale;
        font-size: 1.5rem;
        margin-right: .5rem;
        float: left;
    }
    span{
        float: left;
        @include font-roboto(1rem,$black,400,1.5rem);
    }
    &:hover{
        cursor: pointer;
        i{
            color: $black;
        }
        span{
            @include font-roboto(false,$greenMed,false,false);
        }
    }
    &:active,&:focus{
    }
}
